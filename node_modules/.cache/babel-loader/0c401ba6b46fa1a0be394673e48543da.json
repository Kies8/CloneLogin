{"ast":null,"code":"const utilities = {\n  checkPersonal: input => {\n    if (input !== undefined) {\n      return /^[\\p{L}\\p{N}*-]+$/u.test(input);\n    }\n\n    return \"errorClass\";\n  },\n  checkEmailValidity: email => {\n    if (email !== undefined) {\n      return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n    }\n\n    ;\n    return \"errorClass\";\n  },\n  checkPasswordValidity: password => {\n    if (password !== undefined) {\n      return /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[.,!@#$%^&*])(?=.{8,})/.test(password);\n    }\n\n    ;\n    return \"errorClass\";\n  },\n  checkConfirmPasswordValidity: (password, confirmPassword) => {\n    if (password !== undefined && confirmPassword !== undefined) {\n      return password === confirmPassword;\n    }\n  },\n  checkGender: gender => {\n    if (gender !== undefined && gender !== '') {\n      return true;\n    }\n  },\n  checkDate: date => {\n    let dayOfBirth = new Date(date).getTime() / 1000;\n\n    if (dayOfBirth !== undefined && dayOfBirth <= new Date().setFullYear(new Date().getFullYear() - 16) / 1000) {\n      return true;\n    }\n  },\n  generateCode: () => {\n    return Math.floor(Math.random() * (99999 - 10000) + 10000);\n  },\n  checkCode: (code, codeInput) => {\n    return code === codeInput;\n  }\n};\nexport default utilities;","map":{"version":3,"sources":["/Users/lorenzochiesa/Desktop/clonelogin/src/utilities/utilities.js"],"names":["utilities","checkPersonal","input","undefined","test","checkEmailValidity","email","checkPasswordValidity","password","checkConfirmPasswordValidity","confirmPassword","checkGender","gender","checkDate","date","dayOfBirth","Date","getTime","setFullYear","getFullYear","generateCode","Math","floor","random","checkCode","code","codeInput"],"mappings":"AAAA,MAAMA,SAAS,GAAG;AACdC,EAAAA,aAAa,EAAGC,KAAD,IAAW;AACtB,QAAIA,KAAK,KAAKC,SAAd,EAAyB;AACrB,aAAO,qBAAqBC,IAArB,CAA0BF,KAA1B,CAAP;AACH;;AACD,WAAO,YAAP;AACH,GANa;AAQdG,EAAAA,kBAAkB,EAAGC,KAAD,IAAW;AAC3B,QAAIA,KAAK,KAAKH,SAAd,EAAyB;AACrB,aAAO,wJAAwJC,IAAxJ,CAA6JE,KAA7J,CAAP;AACH;;AAAA;AACD,WAAO,YAAP;AACH,GAba;AAedC,EAAAA,qBAAqB,EAAGC,QAAD,IAAc;AACjC,QAAIA,QAAQ,KAAKL,SAAjB,EAA4B;AACxB,aAAO,gEAAgEC,IAAhE,CAAqEI,QAArE,CAAP;AACH;;AAAA;AACD,WAAO,YAAP;AAEH,GArBa;AAuBdC,EAAAA,4BAA4B,EAAE,CAACD,QAAD,EAAWE,eAAX,KAA+B;AACzD,QAAIF,QAAQ,KAAKL,SAAb,IAA0BO,eAAe,KAAKP,SAAlD,EAA6D;AACzD,aAAOK,QAAQ,KAAKE,eAApB;AACH;AACJ,GA3Ba;AA6BdC,EAAAA,WAAW,EAAGC,MAAD,IAAY;AACrB,QAAIA,MAAM,KAAKT,SAAX,IAAwBS,MAAM,KAAK,EAAvC,EAA2C;AACvC,aAAO,IAAP;AACH;AACJ,GAjCa;AAmCdC,EAAAA,SAAS,EAAGC,IAAD,IAAU;AACjB,QAAIC,UAAU,GAAG,IAAIC,IAAJ,CAASF,IAAT,EAAeG,OAAf,KAA2B,IAA5C;;AACA,QAAIF,UAAU,KAAKZ,SAAf,IAA4BY,UAAU,IAAI,IAAIC,IAAJ,GAAWE,WAAX,CAAuB,IAAIF,IAAJ,GAAWG,WAAX,KAA2B,EAAlD,IAAwD,IAAtG,EAA4G;AACxG,aAAO,IAAP;AACH;AACJ,GAxCa;AA0CdC,EAAAA,YAAY,EAAE,MAAM;AAChB,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB,QAAQ,KAAzB,IAAkC,KAA7C,CAAP;AACH,GA5Ca;AA8CdC,EAAAA,SAAS,EAAE,CAACC,IAAD,EAAOC,SAAP,KAAqB;AAC5B,WAAOD,IAAI,KAAKC,SAAhB;AACH;AAhDa,CAAlB;AAmDA,eAAe1B,SAAf","sourcesContent":["const utilities = {\n    checkPersonal: (input) => {\n        if (input !== undefined) {\n            return /^[\\p{L}\\p{N}*-]+$/u.test(input)\n        }\n        return \"errorClass\";\n    },\n\n    checkEmailValidity: (email) => {\n        if (email !== undefined) {\n            return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n        };\n        return \"errorClass\";\n    },\n\n    checkPasswordValidity: (password) => {\n        if (password !== undefined) {\n            return /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[.,!@#$%^&*])(?=.{8,})/.test(password);\n        };\n        return \"errorClass\";\n\n    },\n\n    checkConfirmPasswordValidity: (password, confirmPassword) => {\n        if (password !== undefined && confirmPassword !== undefined) {\n            return password === confirmPassword;\n        }\n    },\n\n    checkGender: (gender) => {\n        if (gender !== undefined && gender !== '') {\n            return true;\n        }\n    },\n\n    checkDate: (date) => {\n        let dayOfBirth = new Date(date).getTime() / 1000\n        if (dayOfBirth !== undefined && dayOfBirth <= new Date().setFullYear(new Date().getFullYear() - 16) / 1000) {\n            return true;\n        }\n    },\n\n    generateCode: () => {\n        return Math.floor(Math.random() * (99999 - 10000) + 10000);\n    },\n\n    checkCode: (code, codeInput) => {\n        return code === codeInput;\n    }\n};\n\nexport default utilities;"]},"metadata":{},"sourceType":"module"}